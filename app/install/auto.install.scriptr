var responseObject = {};
var channels = require("channel");
var devices = require("device");
var users = require("user");
var groups = require("group");


/** Setup account default domain if none is set **/
var subdomain = request.account.accountKey;
var params = {
    "apsdb.name": subdomain
}

var step = apsdb.callApi("SaveSubdomain", params, null); 
if(step.metadata.status == "failure" && step.metadata.errorCode != "MAX_SUBDOMAINS_EXCEEDED") {
	responseObject["subdomainCreation_"+subdomain] = JSON.stringify("Failed to generate a subdomain for your account under scriptrapps.io on which your APIs will be exposed. A subdomain is needed for the application to call your public APIs without passing the anonymous token. You can always set your account subdomain from the IDE \"Account\" tab.");
} else if(step.metadata.status == "success"){
    responseObject["subdomainCreation_"+subdomain] = JSON.stringify("A subdomain was generated for your account under scriptrapps.io on which your APIs will be exposed. This will also allow users to call your public APIs without passing the anonymous token. You can always change your account subdomain from the IDE \"Account\" tab.");
}
var configurationSettings = {"apsdb.optionalBindReferrer": "true"};
responseObject["savingConfiguration"] = apsdb.callApi("SaveConfiguration", configurationSettings, null)

/** Create a group editor that allows its users to access the scriptr ide plugins, ex: decision table **/
var editorGroup = "editor";
var step2 = groups.create(editorGroup);
responseObject["groupCreation_"+editorGroup] = JSON.stringify(step2);

/** Create a group admin that allows its users to access admin stuff **/
var adminGroup = "admin";
var step3 = groups.create(adminGroup);
responseObject["groupCreation_"+adminGroup] = JSON.stringify(step3);

/** Create Anonymous publish channel used to receive requests from browser **/
var channelsList =  ["requestChannel", "responseChannel"];
var options = {
  "subscribeACL": "anonymous",
  "publishACL": "anonymous"
}

channelsList.forEach(function(channel) {
   var step5 = channels.create(channel, options);
   responseObject["channelCreation_"+channel] = JSON.stringify(step5)
});

//create users to be used to login to the app
var usersList = [ //Device used to login to iot app
    {  
        "id":"admin",
        "password" : "admin",
        "name" : "admin",
        "groups": ["editor","admin"]
    }
];

usersList.forEach(function(params) {
  var step8= users.save(params);
  //var step9=users.generateToken(params.id, {"password": params.password, "expiry": 1800, "lifeTime": 7200, "bindToReferrer": "false"});
  responseObject["userCreation_"+params.id] = JSON.stringify(step8);
  //responseObject["userTokenCreation_"+params.id] = JSON.stringify(step9);

});

//Set a scheduler to cleanup events
var scheduleCleanup = schedule("app/cleanup/devicesEvents", "5 * * * ?");
responseObject["scheduleCleanup"] = JSON.stringify(scheduleCleanup);

return responseObject;
