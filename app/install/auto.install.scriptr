var responseObject = {"failure": [], "success": []};
var channels = require("channel");
var devices = require("device");
var users = require("user");
var groups = require("group");


/** Setup account default domain if none is set **/
var subdomain = request.account.accountKey;
var params = {
    "apsdb.name": subdomain
}

var saveSubdomain = apsdb.callApi("SaveSubdomain", params, null); 
if(saveSubdomain.metadata.status == "failure" && saveSubdomain.metadata.errorCode != "MAX_SUBDOMAINS_EXCEEDED") {
	responseObject.failure.push(JSON.stringify("Failed to generate a subdomain for your account under scriptrapps.io on which your APIs will be exposed. A subdomain is needed for the application to call your public APIs without passing the anonymous token. You can always set your account subdomain from the IDE \"Account\" tab."));
} else if(saveSubdomain.metadata.status == "success"){
     responseObject.success.push(JSON.stringify("A subdomain was generated for your account under scriptrapps.io on which your APIs will be exposed. This will also allow users to call your public APIs without passing the anonymous token. You can always change your account subdomain from the IDE \"Account\" tab."));
}
var configurationSettings = {"apsdb.optionalBindReferrer": "true"};
var saveConfiguration = apsdb.callApi("SaveConfiguration", configurationSettings, null)
if(saveConfiguration.metadata.status == "failure"){
   responseObject.failure.push("Setup account user tokens not bound to the referrer failed."+ saveConfiguration.metadata.errorDetail);
} else {
    responseObject.success.push("Setup account user tokens not bound to the referrer successfull.");
}

/** Create a group editor that allows its users to access the scriptr ide plugins, ex: decision table **/
var editorGroup = "editor";
var saveEditorGroup = groups.create(editorGroup);
if(saveEditorGroup.metadata.status == "failure"){
    responseObject.failure.push("Create a group editor which allows its users to access the scriptr ide plugins when logged in to the app."+ saveEditorGroup.metadata.errorDetail);
} else {
     responseObject.success.push("Create a group editor which allows its users to access the scriptr ide plugins when logged in to the app failed.");
}


/** Create Anonymous publish channel used to receive requests from browser **/
var channelsList =  ["requestChannel", "responseChannel"];
var options = {
  "subscribeACL": "anonymous",
  "publishACL": "anonymous"
}
var saveChannel = null;
channelsList.forEach(function(channel) {
   saveChannel = channels.create(channel, options);
});

if(saveChannel.metadata.status == "failure"){
       responseObject.failure.push("Create application needed channels error. "+saveChannel.metadata.errorDetail);
    } else {
         responseObject.success.push("Create application needed channels error.");
    }

//create users to be used to login to the app
var usersList = [ //Device used to login to iot app
    {  
        "id":"admin",
        "password" : "admin",
        "name" : "admin",
        "groups": ["editor"]
    }
];

usersList.forEach(function(params) {
  var saveUser= users.save(params);
    
    if(saveUser.metadata.status == "failure"){
       responseObject.failure.push("Creating user/password to login to sample application. "+saveUser.metadata.errorDetail);
    } else {
       responseObject.success.push("Create admin/admin user to login to sample application.");
    }
});

return responseObject;
